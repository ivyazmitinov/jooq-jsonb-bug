/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.public_.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.public_.Keys;
import org.jooq.generated.public_.Public;
import org.jooq.generated.public_.tables.records.MetainfoCacheRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MetainfoCache extends TableImpl<MetainfoCacheRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.metainfo_cache</code>
     */
    public static final MetainfoCache METAINFO_CACHE = new MetainfoCache();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetainfoCacheRecord> getRecordType() {
        return MetainfoCacheRecord.class;
    }

    /**
     * The column <code>public.metainfo_cache.cache_part_name</code>.
     */
    public final TableField<MetainfoCacheRecord, String> CACHE_PART_NAME = createField(DSL.name("cache_part_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.metainfo_cache.tenant_id</code>.
     */
    public final TableField<MetainfoCacheRecord, String> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.metainfo_cache.value</code>.
     */
    public final TableField<MetainfoCacheRecord, JSONB> VALUE = createField(DSL.name("value"), SQLDataType.JSONB, this, "");

    private MetainfoCache(Name alias, Table<MetainfoCacheRecord> aliased) {
        this(alias, aliased, null);
    }

    private MetainfoCache(Name alias, Table<MetainfoCacheRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.metainfo_cache</code> table reference
     */
    public MetainfoCache(String alias) {
        this(DSL.name(alias), METAINFO_CACHE);
    }

    /**
     * Create an aliased <code>public.metainfo_cache</code> table reference
     */
    public MetainfoCache(Name alias) {
        this(alias, METAINFO_CACHE);
    }

    /**
     * Create a <code>public.metainfo_cache</code> table reference
     */
    public MetainfoCache() {
        this(DSL.name("metainfo_cache"), null);
    }

    public <O extends Record> MetainfoCache(Table<O> child, ForeignKey<O, MetainfoCacheRecord> key) {
        super(child, key, METAINFO_CACHE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<MetainfoCacheRecord> getPrimaryKey() {
        return Keys.METAINFO_CACHE_PK;
    }

    @Override
    public MetainfoCache as(String alias) {
        return new MetainfoCache(DSL.name(alias), this);
    }

    @Override
    public MetainfoCache as(Name alias) {
        return new MetainfoCache(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MetainfoCache rename(String name) {
        return new MetainfoCache(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MetainfoCache rename(Name name) {
        return new MetainfoCache(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, JSONB> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
